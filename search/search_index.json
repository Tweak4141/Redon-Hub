{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Redon Hub"},{"location":"#overview","title":"Overview","text":"<p>Redon Hub is a Roblox Product Delivery System (AKA Product Hub). This system is designed for self-hosting with multiple options for data storage to suit your needs. It is designed to be as easy to use as possible, while still being powerful and flexible.</p> <p>This system is designed to be as powerfull as other hubs such as myPod, Parcel, and more, while being fully customizable, 100% open source, and free to use.</p> <p>This system is still in development and is not ready for use. Use at your own risk.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Multiple Data Storage Options (SQLite, MySQL, PostgreSQL, MongoDB, and more)</li> <li>Product Delivery System (Automatically DMs the user the product)</li> <li>Discord Bot (Fully control your system via Discord)</li> <li>API (Fully control your system via API)</li> </ul>"},{"location":"#planned-features","title":"Planned Features","text":"<ul> <li>Open Cloud Support</li> <li>Product Testing</li> <li>Monthly Subscriptions</li> <li>Product Loaning (Loan a product for a set time to another user)</li> <li>Product Licenses (Must purchase a product for each group/user using it)</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Read the Installation Guide for more information.</p>"},{"location":"setup/","title":"Index","text":"<p>Danger</p> <p>This system is still in development and is not ready for use. Use at your own risk.</p>"},{"location":"setup/#overview","title":"Overview","text":"<p>Redon Hub is designed to be as easy as possible to use. However, it is still a complex system. This guide will walk you through the installation process. If you need assistance you can ask in our Discord server, but please keep in mind this process is not easy and you should only attempt it if you have experience with databases and Discord bots.</p>"},{"location":"setup/#requirements","title":"Requirements","text":"<ul> <li>A computer or server to host the system on<ul> <li>To be able to recieve Roblox requests you must have a port open</li> <li>It must be online 24/7</li> <li>If you are unable to achieve either of these we provide a hosting service for a small fee (limited free slots avaliable)</li> </ul> </li> <li>Currently you must have either a relational database (MySQL, PostgreSQL, etc.) or MongoDB ready.</li> <li>Have a Discord bot token ready.</li> <li>Python 3.9+ installed (With pip)</li> <li>Git installed (Optional, faster for setup)</li> </ul> Hosting at home <p>I will not be providing any support with port forwarding, I recommend you use a hosting service. If you are unable to figure out how to use a hosting service we provide one.</p> <p>Roblox Setup Setup Bot</p>"},{"location":"setup/bot/configuration/","title":"Configuration","text":"<p>This guide is the next part after setting up the database. If you have not setup the database yet please do so before continuing.</p>"},{"location":"setup/bot/configuration/#creating-the-json-file","title":"Creating the JSON File","text":"<p>The bot uses a mix of both a <code>config.json</code> and a <code>.env</code> file for configuration. The <code>config.json</code> file is used for configuration that is not sensitive and can be shared publicly. The <code>.env</code> file is used for sensitive information such as tokens and database connection strings. To create the <code>config.json</code> file we will copy the <code>example.config.json</code> file and rename it to <code>config.json</code>. We can do this with the following.</p> WindowsLinux <p> </p> <pre><code>cp config.example.json config.json\n</code></pre>"},{"location":"setup/bot/configuration/#configuration-explained","title":"Configuration Explained","text":"<p>Now that we have our <code>config.json</code> file we can start configuring it. Below is a list of all the options and what they do. <pre><code>{\n\"Bot\": {\n\"Prefix\": \".\",\n\"Guilds\": [\n1234567890\n],\n\"Owners\": [\n1234567890\n],\n\"Activity\": {\n\"Presence\": \"watching {users:,} costumers \u2022 Version {version}\",\n\"Status\": \"online\"\n}\n},\n\"Logging\": {\n\"PurchasesChannel\": 1234567890,\n\"GlobalCustomerRole\": 1234567890\n},\n\"Data\": {\n\"Database\": \"mysql|postgresql|mongodb|\"\n},\n\"API\": {\n\"IP\": \"0.0.0.0\",\n\"Port\": 5000,\n\"Key\": \"CHANGEME\"\n}\n}\n</code></pre></p> <ul> <li>Bot:<ul> <li>Prefix: The prefix the bot will use for commands. (Unused)</li> <li>Guilds: A list of guilds the slash commands will be in, please note the first guild in this list will also be the guild the bot will use for customer roles and the purchase channel.</li> <li>Owners: A list of user IDs that will be able to use owner commands.</li> <li>Activity:<ul> <li>Presence: The presence the bot will use. Supports the following variables:<ul> <li><code>{users:,}</code>: The number of users in the database.</li> <li><code>{guilds:,}</code>: The number of guilds the bot is in.</li> <li><code>{version}</code>: The version of the bot.</li> <li><code>{prefix}</code>: The prefix of the bot.</li> </ul> </li> <li>Status: The status the bot will use.</li> </ul> </li> </ul> </li> <li>Logging:<ul> <li>PurchasesChannel: The channel ID of the channel the bot will log purchases in.</li> <li>GlobalCustomerRole: The role ID of the role the bot will give to customers of all products.</li> </ul> </li> <li>Data:<ul> <li>Database: The type of database being used. If you are using MariaDB make sure to use <code>mysql</code>.</li> </ul> </li> <li>API:<ul> <li>IP: The IP the API will listen on. (Best left as <code>\"0.0.0.0\"</code>)</li> <li>Port: The port the API will listen on. (This port must be open to the internet)</li> <li>Key: The key the API will use for authentication. (This key must be kept secret)</li> </ul> </li> </ul>"},{"location":"setup/bot/configuration/#finishing-the-env-file","title":"Finishing the .env file","text":"<p>Now that we have our <code>config.json</code> file we can finish our <code>.env</code> file. To do this we will add the following to the <code>.env</code> file. Replace the values with your own.</p> <pre><code>token=this_is_your_bot_token\n</code></pre> <p>Next: Starting the Bot</p>"},{"location":"setup/bot/database/","title":"Database Setup","text":"<p>This guide is the next part after installing the system. If you have not installed the system yet please do so before continuing.</p> <p>Warning</p> <p>The bot was developed and tested on MariaDB (MySQL) and in our current state of development we have not tested any other databases yet. If you have any issues with other databases please let us know in our Discord server. Details on supported databases.</p>"},{"location":"setup/bot/database/#connection-string","title":"Connection String","text":"<p>After you have choosen the database type you are going to use, make the connector string and save it for later. You will need it in the next step. Get help with connection strings</p> Example <pre><code>mysql://USER:PASSWORD@HOST:PORT/DATABASE\n</code></pre>"},{"location":"setup/bot/database/#setting-up-env-variables","title":"Setting Up ENV Variables","text":"<p>Now that we have our database setup we need to configure the bot to use it. To do this we will use a .env file. This file will contain all of our environment variables that the bot will use. To create the .env file we can do the following.</p> WindowsLinux <p> </p> <pre><code>touch .env\n</code></pre> <p>Now we will add the following to the .env file. Replace the values with your own. <pre><code>token=we_will_come_back_to_this_later\ndatabase=mysql://USER:PASSWORD@HOST:PORT/DATABASE\n</code></pre></p>"},{"location":"setup/bot/database/#using-prisma","title":"Using Prisma","text":"<p>We use Prisma to manage our database. To setup Prisma we will use the following command.</p> Relational DatabaseMySQL (MariaDB)MongoDB <pre><code>python -m prisma generate --schema relational-schema.prisma\n\n# Using db push is not always the best way to do this, however it is the easiest.\npython -m prisma db push --schema relational-schema.prisma\n</code></pre> <pre><code>python -m prisma generate --schema mysql-schema.prisma\n\n# Using db push is not always the best way to do this, however it is the easiest.\npython -m prisma db push --schema mysql-schema.prisma\n</code></pre> <pre><code>python -m prisma generate --schema mongodb-schema.prisma\n\n# Using db push is not always the best way to do this, however it is the easiest.\npython -m prisma db push --schema mongodb-schema.prisma\n</code></pre> <p>Next: Configuration</p>"},{"location":"setup/bot/hosting/","title":"Hosting","text":"<p>This bot can be hosted virtually anywhere Python 3.9+ can run and there is a internet connection. While this does include hosting at home it is still something we do not recommend and there are many VPS providers, discord bot hosting providers, and even free hosting providers that you can use.</p> <p>Obviously we recommend using our hosting service, but if you are unable to use it or do not want to use it we have provided a list of other hosting providers below.</p>"},{"location":"setup/bot/hosting/#pterodactyl-panel-hosting","title":"Pterodactyl Panel Hosting","text":"<p>If you host a pterodactyl panel you can download our egg for easy installation. You can find the egg here.</p> <p>This is the easiest other then Redon Hosting</p>"},{"location":"setup/bot/hosting/#recommended-hosting-providers","title":"Recommended Hosting Providers","text":"<ul> <li>Redon Hosting (Free with limited slots, paid plans available)</li> <li>PebbleHost (Cheap, but does not provide preinstall for Redon Hub)</li> </ul> <p>(I will add more as I find them, if you know of any please let me know in our Discord server)</p>"},{"location":"setup/bot/hosting/#vps-providers","title":"VPS Providers","text":"<p>All of these require debit/credit cards to use, most do not accept prepaid cards.</p> <ul> <li>Oracle Cloud (Free, difficult to get started)</li> <li>DigitalOcean</li> <li>Vultr</li> <li>Linode</li> <li>AWS</li> <li>Google Cloud</li> <li>Azure</li> <li>Onetsolutions (Cheap, but limited English support)</li> <li>Find More</li> </ul>"},{"location":"setup/bot/running/","title":"Starting the Bot","text":"<p>This guide is the next part after configuration. If you have not configured the bot yet please do so before continuing.</p>"},{"location":"setup/bot/running/#running-the-bot","title":"Running the Bot","text":"<p>The easiest part of this entire guide, running the bot. To run the bot we will use the following command. <pre><code>python launcher.py\n</code></pre></p> <p>Warning</p> <p>If you are running the bot on a server you should use a process manager such as screen.</p> Hosting at home <p>I will not be providing any support with port forwarding, I recommend you use a hosting service. If you are unable to figure out how to use a hosting service we provide one.</p>"},{"location":"setup/bot/running/#next-steps","title":"Next Steps","text":"<p>Now that you have the bot running you can start using it. If you need help with commands you can use <code>/</code> to get a list of commands. If you need help with anything else you can ask in our Discord server.</p>"},{"location":"setup/bot/setup/","title":"Setup","text":"<p>Before we get to setting up our database and configuring the bot we must first install the system. To do this we will use git to clone the repository. If you do not have git installed you can download it here.</p> <ol> <li>Open a terminal and navigate to the directory you want to install the system in.</li> <li>Clone the repository     Via Git:     <pre><code>git clone https://github.com/Redon-Tech/Redon-Hub.git\n\n# Get the latest release version\n# if you want the latest development version do not run this.\ngit checkout $(git describe --tags $(git rev-list --tags --max-count=1))\n</code></pre></li> <li>Enter a pipenv     <pre><code>cd Redon-Hub\n\npip install pipenv\n\npipenv shell\n</code></pre></li> <li>Install the requirements     <pre><code>pip install -U -r requirements.txt\n</code></pre></li> </ol> <p>Next: Database Setup</p>"}]}